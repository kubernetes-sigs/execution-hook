/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-csi/execution-hook/pkg/apis/executionhook/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExecutionHookTemplateLister helps list ExecutionHookTemplates.
type ExecutionHookTemplateLister interface {
	// List lists all ExecutionHookTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ExecutionHookTemplate, err error)
	// ExecutionHookTemplates returns an object that can list and get ExecutionHookTemplates.
	ExecutionHookTemplates(namespace string) ExecutionHookTemplateNamespaceLister
	ExecutionHookTemplateListerExpansion
}

// executionHookTemplateLister implements the ExecutionHookTemplateLister interface.
type executionHookTemplateLister struct {
	indexer cache.Indexer
}

// NewExecutionHookTemplateLister returns a new ExecutionHookTemplateLister.
func NewExecutionHookTemplateLister(indexer cache.Indexer) ExecutionHookTemplateLister {
	return &executionHookTemplateLister{indexer: indexer}
}

// List lists all ExecutionHookTemplates in the indexer.
func (s *executionHookTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ExecutionHookTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExecutionHookTemplate))
	})
	return ret, err
}

// ExecutionHookTemplates returns an object that can list and get ExecutionHookTemplates.
func (s *executionHookTemplateLister) ExecutionHookTemplates(namespace string) ExecutionHookTemplateNamespaceLister {
	return executionHookTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExecutionHookTemplateNamespaceLister helps list and get ExecutionHookTemplates.
type ExecutionHookTemplateNamespaceLister interface {
	// List lists all ExecutionHookTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ExecutionHookTemplate, err error)
	// Get retrieves the ExecutionHookTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ExecutionHookTemplate, error)
	ExecutionHookTemplateNamespaceListerExpansion
}

// executionHookTemplateNamespaceLister implements the ExecutionHookTemplateNamespaceLister
// interface.
type executionHookTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExecutionHookTemplates in the indexer for a given namespace.
func (s executionHookTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExecutionHookTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExecutionHookTemplate))
	})
	return ret, err
}

// Get retrieves the ExecutionHookTemplate from the indexer for a given namespace and name.
func (s executionHookTemplateNamespaceLister) Get(name string) (*v1alpha1.ExecutionHookTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("executionhooktemplate"), name)
	}
	return obj.(*v1alpha1.ExecutionHookTemplate), nil
}
